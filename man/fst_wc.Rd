% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fst_wc.R
\name{fst_wc}
\alias{fst_wc}
\title{The Weir-Cockerham FST and FIT estimator}
\usage{
fst_wc(
  X,
  labs,
  FIT = FALSE,
  m = NA,
  ind_keep = NULL,
  loci_on_cols = FALSE,
  mem_factor = 0.7,
  mem_lim = NA,
  m_chunk_max = 1000
)
}
\arguments{
\item{X}{The genotype matrix (BEDMatrix, regular R matrix, or function, same as \code{popkin}).}

\item{labs}{A vector of subpopulation assignments for every individual.
At least two subpoplations must be present.}

\item{FIT}{If \code{FALSE} (default) computes FST only, otherwise computes both FIT and FST.}

\item{m}{The number of loci, required if \code{X} is a function (ignored otherwise).
In particular, \code{m} is obtained from \code{X} when it is a BEDMatrix or a regular R matrix.}

\item{ind_keep}{An optional vector of individuals to keep (as booleans or indexes, used to subset an R matrix).}

\item{loci_on_cols}{Determines the orientation of the genotype matrix (by default, \code{FALSE}, loci are along the rows).
If \code{X} is a BEDMatrix object, the input value is ignored (set automatically to \code{TRUE} internally).}

\item{mem_factor}{Proportion of available memory to use loading and processing genotypes.
Ignored if \code{mem_lim} is not \code{NA}.}

\item{mem_lim}{Memory limit in GB, used to break up genotype data into chunks for very large datasets.
Note memory usage is somewhat underestimated and is not controlled strictly.
Default in Linux and Windows is \code{mem_factor} times the free system memory, otherwise it is 1GB (OSX and other systems).}

\item{m_chunk_max}{Sets the maximum number of loci to process at the time.
Actual number of loci loaded may be lower if memory is limiting.}
}
\value{
A list with the following named elements, in this order:
\itemize{
\item \code{fst}: The genome-wide Fst estimate (scalar).
\item \code{fst_loci}: A vector of per-locus Fst estimates.
\item \code{data}: a 2-by-m matrix of per-locus numerator and denominator Fst estimates.
Useful to obtain a bootstrap distribution for the genome-wide Fst.
\item \code{maf}: a vector of marginal allele frequency estimates, one for each locus.
Note that it has not been converted to \emph{minor} allele frequencies.
}

If \code{FIT = TRUE}, two additional elements, \code{fit} and \code{fit_loci} are appended to the list, and \code{data} becomes a 3-by-m matrix, where the third column is the per-locus numerators of the Fit estimates (the denominators are the same for Fit and Fst).
}
\description{
This function implements the full FST and FIT estimators from Weir and Cockerham (1984).
Handles very large data, passed as BEDMatrix or as a regular R matrix.
Handles missing values correctly.
}
\examples{
# dimensions of simulated data
n_ind <- 100
m_loci <- 1000
k_subpops <- 10
n_data <- n_ind * m_loci

# missingness rate
miss <- 0.1

# simulate ancestral allele frequencies
# uniform (0,1)
# it'll be ok if some of these are zero
p_anc <- runif(m_loci)

# simulate some binomial data
X <- rbinom(n_data, 2, p_anc)

# sprinkle random missingness
X[ sample(X, n_data * miss) ] <- NA

# turn into a matrix
X <- matrix(X, nrow = m_loci, ncol = n_ind)

# create subpopulation labels
# k_subpops groups of equal size
labs <- ceiling( (1 : n_ind) / k_subpops )

# estimate FST using the Weir-Cockerham formula
fst_wc_obj <- fst_wc(X, labs)

# the genome-wide FST estimate
fst_wc_obj$fst

# vector of per-locus FST estimates
fst_wc_obj$fst_loci

# estimate FST and FIT using the Weir-Cockerham formula
# (normally FIT estimates are not calculated,
# this adds them to return object)
fst_wc_obj <- fst_wc(X, labs, FIT = TRUE)

# the genome-wide FIT estimate
fst_wc_obj$fit

# vector of per-locus FIT estimates
fst_wc_obj$fit_loci

}
\seealso{
The popkin package.
}
